library("dplyr")
library("ggplot2")
library("shiny")
library("shinythemes")
library("stringr")
library("maps")
library("countrycode")
library("RColorBrewer")
library("geojsonio")
library("leaflet")
library("DT")
library("htmltools")
library("jsonlite")

### some sources
# http://rstudio.github.io/leaflet/choropleths.html
# https://rpubs.com/walkerke/leaflet_choropleth
# http://stackoverflow.com/questions/33274978/shiny-leaflet-map-with-multiple-observers

### Todos
# 1. Draw the map - done
# 2. Overlay choropleth titles (leaflet::addPolygons() maybe)
#     1. Normalize imex data
#     2. Normalize world coordinates <-- data inconsistency, json/dataframe
# 3. Add popups
#     * seems rather simple
# 4. Merge other graphs to tabs <-- easy


# Load data
grains <- read.csv("./data/FeedGrains.csv", stringsAsFactors = FALSE, strip.white = TRUE)

# World GeoJSON data
world.geojson <- geojson_read("./json/countries.geo.json")

# Range of year used in map
years <- grains %>% 
  filter(SC_Frequency_Desc == "Annual") %>%
  filter(SC_Group_Desc == "Exports and imports")
year.range <- range(years$Year_ID)

my.ui <- fluidPage(
  navbarPage("Grain", id = "nav",
             
             tabPanel("Interactive map",
                      div(class="outer",
                          
                          tags$head(
                            # Include our custom CSS
                            includeCSS("./css/styles.css"),
                            includeScript("./javascript/gomap.js")
                          ),
                          
                          leafletOutput("map", width="100%", height="100%"),
                          
                          # Shiny versions prior to 0.11 should use class="modal" instead.
                          absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
                                        draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
                                        width = 330, height = "auto",
                                        
                                        h2("Data explorer"),
                                        
                                        selectInput("imex", "Import/Export", c("Imports, to U.S. from specified source",
                                                                               "Exports, from U.S. to specified destination")),
                                        selectInput("grain", "Grain type", c("Barley", "Corn", "Oats", "Sorghum"),
                                                    selected = "Corn"),
                                        sliderInput("year", "Year", min = year.range[1], max = year.range[2], value = 2016, step = 1),
                                        
                                        plotOutput("all_year", height = 200) # all year import export
                          ),
                                        
                          tags$div(id="cite",
                                   'Data compiled for ', tags$em('Feed Grains Database'), ' by United States Department of Agriculture Economic Research Service.'
                          )
                      )
             ),
             
             tabPanel("Data viewer",
                      selectInput("imex1", "Import/Export", c("Imports, to U.S. from specified source",
                                                             "Exports, from U.S. to specified destination")),
                      selectInput("grain1", "Grain type", c("Barley", "Corn", "Oats", "Sorghum"),
                                  selected = "Corn"),
                      sliderInput("year1", "Year", min = year.range[1], max = year.range[2], value = 2016, step = 1),
                      DT::dataTableOutput("datatable")
                      )
  )
)


my.server <- function(input, output) {
    
  # Countries in interest
  countries <-
    grains %>%
    select(SC_Geography_ID, SC_GeographyIndented_Desc) %>%
    unique() %>%
    mutate(ISO3 = countrycode(SC_GeographyIndented_Desc, "country.name", "iso3c")) %>%
    filter(!is.na(ISO3))

  # Remove unnecessary regions
  countries <- countries[!(grepl("U.S. -", countries$SC_GeographyIndented_Desc) |
                             grepl("45", countries$SC_Geography_ID) | # Former Soviet Union-12
                             grepl("128", countries$SC_Geography_ID)),] # Former USSR

  # Import and export, by annual
  imex.all <-
    grains %>%
    filter(SC_Frequency_Desc == "Annual") %>%
    filter(SC_Group_Desc == "Exports and imports")

  # Remove unnecessary fields
  imex.all <- imex.all[!(grepl("1,000 liters", imex.all$SC_Unit_Desc)),] # alcohol
  drops <- c("SC_Group_ID", "SC_Group_Desc", "SC_GroupCommod_ID", "SortOrder",
             "SC_Commodity_ID", "SC_Attribute_ID", "SC_Unit_ID", "SC_Frequency_ID",
             "Timeperiod_ID", "Timeperiod_Desc")
  imex.all <- imex.all[, !(names(imex.all) %in% drops)]
  # Countries in interest
  imex.all <- filter(imex.all, SC_Geography_ID %in% unlist(countries$SC_Geography_ID))

  # # Preparing map data
  # # Deprecated from `leaflet`
  # world <- map_data("world")
  # world <- world[world$region != "Antarctica",] # no country is in Antarctica
  # world$ISO3 <- countrycode(world$region, "country.name", "iso3c")
  # world$region <- NULL # dont need region
  # world <-
  #   right_join(countries, world) %>%
  #   filter(!is.na(SC_Geography_ID))

  # Preparing imex data
  imex.reactive <- reactive({
    data <-
      imex.all %>%
      filter(SC_Attribute_Desc == input$imex) %>%
      filter(SC_Commodity_Desc == input$grain) %>%
      filter(Year_ID == input$year)
    
    # Mutate ISO3
    data$id <- countrycode(data$SC_GeographyIndented_Desc, "country.name", "iso3c")

    # # combine world data
    # # Deprecated from `leaflet`
    # data <- right_join(world, imex.reactive())
    # data$subregion <- NULL # dont neet subregion

    return(data)
  })
  
  # Load geojson
  world.geojson <- geojson_read("./json/countries.geo.json", what = "sp")
  
  bins <- c(1, 20, 50, 100, 200, 500, 1000, 2000, Inf)
  
  # Create the map
  output$map <- renderLeaflet({
    # m <-
    #   leaflet() %>%
    #   addTiles(
    #     urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
    #     attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
    #   ) %>%
    #   setView(lng = -93.85, lat = 37.45, zoom = 4) 
    
    pal <- colorBin("YlOrRd", domain = imex.reactive()$Amount, bins = bins)
    
    labels <- sprintf(
      "<strong>%s</strong><br/>%g 1000 metric tons",
      imex.reactive()$SC_GeographyIndented_Desc, imex.reactive()$Amount
    ) %>% lapply(htmltools::HTML)
    
    m <- 
      leaflet(world.geojson) %>%
      setView(-96, 37.8, 4) %>%
      addProviderTiles("MapBox", options = providerTileOptions(
        id = "mapbox.light",
        accessToken = 
          'pk.eyJ1IjoiYnJ5b2NvIiwiYSI6ImNpenhzd2sxaDAyZXIzMms3anB2YnBmZnAifQ.yUJFrNDonPhL-W1bHC-WXg')) %>% 
      addPolygons(
        fillColor = ~pal(imex.reactive()$Amount),
        weight = 2,
        opacity = 1,
        color = "white",
        dashArray = "3",
        fillOpacity = 0.7,
        highlight = highlightOptions(
          weight = 5,
          color = "#666",
          dashArray = "",
          fillOpacity = 0.7,
          bringToFront = TRUE),
        label = labels,
        labelOptions = labelOptions(
          style = list("font-weight" = "normal", "padding" = "3px 8px"),
          textsize = "15px",
          direction = "auto")) %>%
      # add legends
      addLegend(pal = pal, values = ~imex.reactive()$Amount, opacity = 0.7, title = NULL, position = "bottomright")
    
    return(m)
  })
  
  datatable.reactive <- reactive({
    data <-
      imex.all %>%
      filter(SC_Attribute_Desc == input$imex1) %>%
      filter(SC_Commodity_Desc == input$grain1) %>%
      filter(Year_ID == input$year1)
    
    # # combine world data
    # # Deprecated from `leaflet`
    # data <- right_join(world, imex.reactive())
    # data$subregion <- NULL # dont neet subregion
    
    return(data)
  })
  
  # Create data table
  output$datatable <- DT::renderDataTable({
    return(datatable.reactive())
  })
  
}

shinyApp(ui = my.ui, server = my.server)
